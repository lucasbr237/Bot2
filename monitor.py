import os
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from huggingface_hub import InferenceClient

# Inicializa o cliente de infer√™ncia
client = InferenceClient(api_key="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")

# Substitua pelo seu token do bot
API_TOKEN = '7421986854:AAFx3Kz_Sd_hMxZ0v8-nV5dnAsTFJyLplgY'
bot = telebot.TeleBot(API_TOKEN)

# Inicializa um dicion√°rio para armazenar URLs de imagens
bot.image_urls = {}

# Fun√ß√£o para criar pasta do usu√°rio
def create_user_folder(user_id):
    folder_path = f'./users/{user_id}'
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    return folder_path

# Fun√ß√£o para salvar imagem no diret√≥rio do usu√°rio
def save_image(user_id, file_path, file_name):
    folder_path = create_user_folder(user_id)
    file_path_full = os.path.join(folder_path, file_name)
    
    # Baixa o arquivo e salva na pasta do usu√°rio
    downloaded_file = bot.download_file(file_path)
    with open(file_path_full, 'wb') as new_file:
        new_file.write(downloaded_file)
    
    return file_path_full

# Fun√ß√£o para registrar logs das intera√ß√µes
def log_interaction(user_id, interaction):
    folder_path = create_user_folder(user_id)
    log_file = os.path.join(folder_path, 'interactions_log.txt')
    with open(log_file, 'a') as f:
        f.write(f'\n\n{interaction}\n')  # Adiciona uma linha em branco entre as intera√ß√µes

@bot.message_handler(commands=['start'])
def start(message):
    welcome_message = (
        "<b>Bem-vindo ao Bot de An√°lise de Imagens!</b>\n\n"
        "<b>O que voc√™ pode fazer:</b>\n\n"
        "1. üñº <b>Extrair Texto de Imagens:</b> Transforme textos de fotos em formato digital.\n\n"
        "2. üîç <b>An√°lise de Imagens:</b> Receba an√°lises completas e insights sobre suas imagens.\n\n"
        "3. ü§î <b>Tirar D√∫vidas:</b> Envie suas imagens e obtenha respostas r√°pidas para suas perguntas sobre elas!\n\n"
        "<i>Envie uma imagem pra come√ßar!</i>"
    )
    bot.send_message(message.chat.id, welcome_message, parse_mode='HTML')

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    # Obt√©m a imagem enviada
    photo_file = bot.get_file(message.photo[-1].file_id)
    photo_url = f'https://api.telegram.org/file/bot{API_TOKEN}/{photo_file.file_path}'

    # Salva a imagem no diret√≥rio do usu√°rio
    image_path = save_image(message.chat.id, photo_file.file_path, f"{message.photo[-1].file_id}.jpg")

    # Cria os bot√µes inline lado a lado
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("Adicionar texto", callback_data='add_text'),
        InlineKeyboardButton("An√°lise sem texto", callback_data='analyze_without_text')
    )

    # Envia a mensagem com os bot√µes
    bot.send_message(message.chat.id, "Escolha uma das op√ß√µes:", reply_markup=keyboard)

    # Armazena a URL da imagem e o caminho local no dicion√°rio para uso posterior
    bot.image_urls[message.chat.id] = {"url": photo_url, "path": image_path}

# Fun√ß√£o para lidar com os bot√µes
@bot.callback_query_handler(func=lambda call: True)
def button(call):
    if call.data == 'add_text':
        bot.send_message(call.message.chat.id, 
                         "Por favor, digite o texto, que pode ser uma observa√ß√£o sobre o que v√™, ou uma pergunta.")
        bot.register_next_step_handler(call.message, get_user_input, 'add_text')
    elif call.data == 'analyze_without_text':
        bot.send_message(call.message.chat.id, "Processando sua solicita√ß√£o, aguarde...")
        image_data = bot.image_urls.get(call.message.chat.id)
        prompt = "Forne√ßa uma descri√ß√£o breve e clara do conte√∫do da imagem."
        process_image(call.message.chat.id, image_data['url'], prompt)

# Fun√ß√£o para obter o texto do usu√°rio
def get_user_input(message, option):
    user_text = message.text
    image_data = bot.image_urls.get(message.chat.id)  # Recupera a URL e caminho da imagem armazenada
    prompt = f"{user_text}."
    
    # Log da intera√ß√£o do usu√°rio
    log_interaction(message.chat.id, f"Texto adicional do usu√°rio: {user_text}")
    
    bot.send_message(message.chat.id, "Processando sua solicita√ß√£o, aguarde...")  # Mensagem de processamento

    # Verifica se a imagem est√° dispon√≠vel
    if image_data is None:
        bot.send_message(message.chat.id, "Erro: Nenhuma imagem encontrada. Tente enviar a imagem novamente.")
        return
    
    process_image(message.chat.id, image_data['url'], prompt)

# Fun√ß√£o para processar a imagem
def process_image(chat_id, photo_url, prompt):
    response_content = ""
    log_interaction(chat_id, f"Solicita√ß√£o de processamento da imagem: {photo_url} com prompt '{prompt}'")

    # Verificando se a URL da imagem est√° correta
    if not photo_url:
        bot.send_message(chat_id, "Erro: URL da imagem n√£o est√° dispon√≠vel.")
        return

    # Envie uma solicita√ß√£o para a API Hugging Face
    for message in client.chat_completion(
        model="meta-llama/Llama-3.2-11B-Vision-Instruct",
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "image_url", "image_url": {"url": photo_url}},
                    {"type": "text", "text": prompt},
                ],
            }
        ],
        max_tokens=5000,
        stream=True,
        temperature=0.5,
        top_p=0.9,
    ):
        response_content += message.choices[0].delta.content  # Armazena todas as partes

    # Log da resposta completa e envio ao usu√°rio
    log_interaction(chat_id, f"Resposta da API: {response_content}")
    bot.send_message(chat_id, response_content)

# Inicia o bot
if __name__ == '__main__':
    bot.polling() 